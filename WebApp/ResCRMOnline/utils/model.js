define([ "base", "ajax", "class" ],function ( base, Ajax, $class ){	var collect = new Ajax();	collect.setting({		interface : "restapi/soa2/10108/json/"	});	var CollectModel = {		//添加收藏		addProduct : function ( productList, channel, callback ){			collect.send("myfavoritesadd",{ "FavoriteList" : productList, "Channel" : channel }, function ( error, data ){				if( error ) return callback( error );				return callback( null,data );			});		},		//取消收藏		deleteProduct : function ( productList, callback ){			collect.send("myfavoritesdelete", { "FavoriteIdList" : productList }, function ( error, data ){				if( error ) return callback( error );				return callback( null, data );			});		},		//是否已经收藏		isMyFavorites : function ( QueryList, callback ){			collect.send("ismyfavorites", { "QueryList" : QueryList }, callback);		},		//获取分组列表		getGroupInfo : function ( callback ){			collect.send("GetTagList",{},function ( error,data ){				if( error ) return callback( error );				return callback( null,data );			});		},		//创建新分组		createNewGroup : function ( tagName,callback ){			collect.send("newtag",{				"TagName": tagName			},function ( error,data ){				if( error ) return callback( error );				return callback( null,data );			});		},		//保存至某一分组		collectIt : function ( tagId, callback ){			collect.send("addproducttag",{				"FavoriteIDs" : h5collect.FavoriteIDs,				"TagIDs" : tagId			},function ( error, data ){				if( error ) return callback( error );				if( data.ResultCode == -3 || data.ResultCode == -2 || data.ResultCode == -1 ){					console.error( "<h5.ui.collect> errors：" + data.ResultMessage );					return callback( true );				}				return callback( null, data );			});		},		//检测新组名		validateGroupName : function ( val, callback ){			var self = this;			if( val && typeof val === "string" && val.length > 0 ){				//如果这次的新组名和上一次的组名一致，就不发请求，直接用上次的错误信息返回				if( this.lastVal !== val && h5collect.groupNameList.indexOf(val) < 0 ){					if( val.replace( /[\u4e00-\u9fa5]/g,'--').length>18 ) {						return callback({"errorMsg":'分组名称不可超过18个字符'});					} else if( /[\<\>]/.test(val) ) {						return callback({"errorMsg":'分组名称不可包含“<>”等字符'});					} else {						this.lastVal = val;						this.createNewGroup(val,function ( error,data ){							if( error ) return callback( error );							//创建分组成功，保存进新分组							self.collectIt(data.TagID, function ( err, docs ){								if( err ) return callback( err );								return callback( null, docs );							});						});					}				}else{					return callback({"errorMsg":"您输入的分组名称已存在，请重新输入"});				}			}else{				return callback({"errorMsg":"请填写分组名称"});			}		}	};	return CollectModel;});